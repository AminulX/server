<Project>

	<PropertyGroup>
		<TargetFramework>net5.0</TargetFramework>
		<Version>1.44.1</Version>
		<RootNamespace>Bit.$(MSBuildProjectName)</RootNamespace>
	</PropertyGroup>

	<!---->
	<PropertyGroup Label="Define Versions">
		<!--
			NuGet Package: https://www.nuget.org/packages/NewRelic.Agent/
			Source Repo: https://github.com/newrelic/newrelic-dotnet-agent
			Used In: Admin, Api, Billing, Events, Identity
		-->
		<NewRelicAgentVersion>8.41.0</NewRelicAgentVersion>
		<!--
			NuGet Package: https://www.nuget.org/packages/Microsoft.VisualStudio.Web.CodeGeneration
			Source Repo: https://github.com/dotnet/Scaffolding
			Used In: Admin, Billing
		-->
		<MicrosoftVisualStudioWebCodeGenerationDesignVersion>5.0.2</MicrosoftVisualStudioWebCodeGenerationDesignVersion>
		<!--
			For the most part everything in the https://github.com/dotnet/aspnetcore
			repo has the same exact release cadence. Any of the packages on that cadence can
			this property to manage their version. Most of those packages follow the 
			Microsoft.AspNetCore.* naming convention.

			Examples:
			Microsoft.AspNetCore.SignalR.Protocols.MessagePack - Notifications
			Microsoft.AspNetCore.SignalR.StackExchangeRedis - Notifications
			Microsoft.AspNetCore.Mvc.NewtonsoftJson - Api
			Microsoft.AspNetCore.Authentication.JwtBearer - Core
		-->
		<AspNetCorePackagesVersion>5.0.9</AspNetCorePackagesVersion>
		<!--
			For the most part everything in the https://github.com/dotnet/efcore
			repo has the same exact release cadence. Any of the packages on that cadence can
			this property to manage their version. Most of those packages follow the 
			Microsoft.EntityFrameworkCore.* naming convention.
			
			Examples:

		-->
		<EntityFrameworkCorePackagesVersion>5.0.9</EntityFrameworkCorePackagesVersion>
		<!--
			NuGet Package: https://www.nuget.org/packages/Microsoft.NET.Test.Sdk/
			Source Repo: https://github.com/microsoft/vstest
			Used In: All test projects
		-->
		<MicrosoftNetTestSdkVersion>16.7.1</MicrosoftNetTestSdkVersion>
		<!--
			NuGet Package: https://www.nuget.org/packages/xunit/
			Source Repo: https://github.com/xunit/xunit
			Used In: All test projects
		-->
		<XUnitVersion>2.4.1</XUnitVersion>
		<!--
			NuGet Package: https://www.nuget.org/packages/xunit.runner.visualstudio/
			Source Repo: https://github.com/xunit/visualstudio.xunit
			Used In: All test projects
		-->
		<XUnitRunnerVisualStudioVersion>2.4.3</XUnitRunnerVisualStudioVersion>
		<!--
			NuGet Package: https://www.nuget.org/packages/coverlet.collector/
			Source Repo: https://github.com/coverlet-coverage/coverlet
			Used In: All test projects
		-->
		<CoverletCollectorVersion>3.0.3</CoverletCollectorVersion>
		<!--
			NuGet Package: https://www.nuget.org/packages/Moq/
			Source Repo: https://github.com/moq/moq4
			Used In: Core.Test
		-->
		<MoqVersion>4.16.1</MoqVersion>
		<!--
			NuGet Package: https://www.nuget.org/packages/NSubstitute/
			Source Repo: https://github.com/nsubstitute/NSubstitute
			Used In: Api.Test, Core.Test, Icons.Test
		-->
		<NSubstituteVersion>4.2.2</NSubstituteVersion>
		<!--
			NuGet Package: https://www.nuget.org/packages/AutoFixture.Xunit2/
			Source Repo: https://github.com/AutoFixture/AutoFixture
			Used In: Api.Test, Core.Test
		-->
		<AutoFixtureXunit2Version>4.14.0</AutoFixtureXunit2Version>
		<!--
			NuGet Package: https://www.nuget.org/packages/AutoFixture.AutoNSubstitute/
			Source Repo: https://github.com/AutoFixture/AutoFixture
			Used In: Core.Test
		-->
		<AutoFixtureAutoNSubstituteVersion>4.14.0</AutoFixtureAutoNSubstituteVersion>
	</PropertyGroup>

	<!-- Set unit test project specific properties-->
	<PropertyGroup Condition="$(MSBuildProjectName.EndsWith('.Test'))">
		<!-- 
			The below condition allows a project to override this property without MSBuild overwriting it with true.
			This would be for projects that end in .Test but are not unit test projects.
		-->
		<IsUnitTestProject Condition="'$(IsUnitTestProject)' == ''">true</IsUnitTestProject>
		<IsPackable Condition="'$(IsPackable)' == ''">false</IsPackable>
		<!-- Test methods don't need to end in Async even if they are async -->
		<NoWarn>$(NoWarn);IDE1006</NoWarn>
	</PropertyGroup>

  <!-- This adds all default test project references -->
	<ItemGroup Condition="'$(IsUnitTestProject)' == 'true'">
		<PackageReference Include="Microsoft.NET.Test.Sdk" Version="$(MicrosoftNetTestSdkVersion)" />
		<PackageReference Include="coverlet.collector" Version="$(CoverletCollectorVersion)">
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      		<PrivateAssets>all</PrivateAssets>
		</PackageReference>
		<PackageReference Include="xunit" Version="$(XUnitVersion)" />
		<PackageReference Include="xunit.runner.visualstudio" Version="$(XUnitRunnerVisualStudioVersion)">
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
	</ItemGroup>

</Project>
